---

- name: Set quay_root if not defined
  set_fact:
    quay_root: "/opt/quay"
  when: quay_root is undefined
  
- name: Set quay_port if not defined
  set_fact:
    quay_port: 8443
  when: quay_port is undefined
    
  # Only when running outside of systemd
- name: Stop Quay services
  become: true
  systemd:
    name: "{{ item }}"
    state: stopped
  loop:
    - "quay-app.service"
    - "quay-redis.service"
    - "quay-postgres.service"
    - "quay-pod.service"
  loop_control:
    pause: 5
#      when:
#        - not (launched_by_systemd | bool)
    
# The ansible_env.HOSTNAME doesn't get set for some reason
- name: Get hostname
  ansible.builtin.command: hostname
  register: hostname_info
  when:
    - quay_hostname is not defined
    
- name: Set quay hostname to system hostname
  set_fact:
    quay_hostname: "{{ hostname_info.stdout }}"
  when:
    - quay_hostname is not defined
    
- name: Change SERVER_HOSTNAME in quay config to current hostname
  become: true
  ansible.builtin.lineinfile:
    path: "{{ quay_root }}/quay-config/config.yaml"
    regexp: '^SERVER_HOSTNAME:.*'
    line: "SERVER_HOSTNAME: {{ quay_hostname }}:{{ quay_port }}"
    
- name: Remove existing certs
  become: true
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ quay_root }}/quay-config/openssl.cnf"
    - "{{ quay_root }}/quay-config/ssl.cert"
    - "{{ quay_root }}/quay-config/ssl.csr"
    - "{{ quay_root }}/quay-config/ssl.key"
    - "{{ quay_root }}/quay-rootCA/rootCA.pem"
    - "{{ quay_root }}/quay-rootCA/rootCA.srl"
    - "{{ quay_root }}/quay-rootCA/rootCA.key"
    
- name: Create SSL Certs
  block:
    - name: Create necessary directory for Quay rootCA files
      become: true
      ansible.builtin.file:
        path: "{{ quay_root }}/quay-rootCA"
        state: directory
        recurse: true
    
    - name: Create OpenSSL Config
      become: true
      template:
        src: templates/req.j2
        dest: "{{ quay_root }}/quay-config/openssl.cnf"
    
    - name: Create root CA key
      become: true
      command: "openssl genrsa -out {{ quay_root }}/quay-rootCA/rootCA.key 2048"
    
    - name: Create root CA pem
      become: true
      command: "openssl req -x509 -new -config {{ quay_root }}/quay-config/openssl.cnf -nodes -key {{ quay_root }}/quay-rootCA/rootCA.key -sha256 -days 1024 -out {{ quay_root }}/quay-rootCA/rootCA.pem -addext basicConstraints=critical,CA:TRUE,pathlen:1"
    
    - name: Create ssl key
      become: true
      command: "openssl genrsa -out {{ quay_root }}/quay-config/ssl.key 2048"
    
    - name: Create CSR
      become: true
      command: "openssl req -new -key {{ quay_root }}/quay-config/ssl.key -out {{ quay_root }}/quay-config/ssl.csr -subj \"/CN=quay-enterprise\" -config {{ quay_root }}/quay-config/openssl.cnf"
    
    - name: Create self-signed cert
      become: true
      command: "openssl x509 -req -in {{ quay_root }}/quay-config/ssl.csr -CA {{ quay_root }}/quay-rootCA/rootCA.pem -CAkey {{ quay_root }}/quay-rootCA/rootCA.key -CAcreateserial -out {{ quay_root }}/quay-config/ssl.cert -days 356 -extensions v3_req -extfile {{ quay_root }}/quay-config/openssl.cnf"
    
    - name: Create chain cert
      become: true
      ansible.builtin.shell: cat {{ quay_root }}/quay-config/ssl.cert {{ quay_root }}/quay-rootCA/rootCA.pem > {{ quay_root }}/quay-config/chain.cert
    
    - name: Replace ssl cert with chain cert
      become: true
      command: mv --force {{ quay_root }}/quay-config/chain.cert {{ quay_root }}/quay-config/ssl.cert
    
- name: Set certificate permissions
  block:
    - name: Set permissions for key
      become: true
      ansible.builtin.file:
        path: "{{ quay_root }}/quay-config/ssl.key"
        mode: u=rw,g=r,o=r
        owner: root
        group: root
    
    - name: Set permissions for cert
      become: true
      ansible.builtin.file:
        path: "{{ quay_root }}/quay-config/ssl.cert"
        mode: u=rw,g=r,o=r
        owner: root
        group: root
    
    - name: Set permissions for quay CA cert
      become: true
      ansible.builtin.file:
        path: "{{ quay_root }}/quay-rootCA/rootCA.pem"
        mode: u=rw,g=r,o=r
        owner: root
        group: root
    
- name: Remove existing certificate copies
  become: true
  file:
    path: '{{ item }}'
    state: absent
  with_items:
    - '/etc/pki/ca-trust/source/anchors/quay.cert"'
    
# Make sure to trust the self signed cert we just made
- name: Copy self signed cert to registry's PKI trust
  become: true
  copy:
    src: "{{ quay_root }}/quay-config/ssl.cert"
    dest: '/etc/pki/ca-trust/source/anchors/quay.cert'
    owner: root
    group: root
    mode: 0644
    remote_src: true
    
- name: update registry trusted ca
  become: true
  command: update-ca-trust
    
- name: update registry trusted ca extract
  become: true
  command: update-ca-trust extract
    
  # Only when running outside of systemd
- name: Start Quay services
  become: true
  systemd:
    name: "{{ item }}"
    state: started
  loop:
    - "quay-pod.service"
    - "quay-postgres.service"
    - "quay-redis.service"
    - "quay-app.service"
  loop_control:
    pause: 5
#      when:
#        - not (launched_by_systemd | bool)
    
- name: Wait for services to restart
  pause:
    minutes: 2
    
- name: Get Registry Username
  shell: |
    grep -o '(.*, .*)' /var/log/mirror-registry.log | sed 's|[(),]||g' | awk '{print $1}'
  register: reg_user_info
  when:
    - reg_user is not defined
    
- name: Get Registry Password
  shell: |
    grep -o '(.*, .*)' /var/log/mirror-registry.log | sed 's|[(),]||g' | awk '{print $2}'
  register: reg_pass_info
  when:
    - reg_pass is not defined
    
- name: Set registry username fact
  set_fact:
    reg_user: "{{ reg_user_info.stdout }}"
  when:
    - reg_user is not defined
    
- name: Set registry password fact
  set_fact:
    reg_pass: "{{ reg_pass_info.stdout }}"
  when:
    - reg_pass is not defined
    
- name: Remove existing pull secret file
  file:
    path: "/home/ec2-user/pull-secret.txt"
    state: absent
    
- name: Login to the registry and drop a pull secret in ec2-user home
  containers.podman.podman_login:
    registry: "{{ quay_hostname }}:{{ quay_port }}"
    username: "{{ reg_user }}"
    password: "{{ reg_pass }}"
    authfile: "/home/ec2-user/pull-secret.txt"
    
#      # Stop systemd from running this playbook
#      # There is no check at the top for this so users can run
#      # the playbook manually
#    - name: Touch firstboot file
#      become: true
#      ansible.builtin.file:
#        path: /etc/sysconfig/rh-quay-firstboot
#        state: touch
#      when:
#        - (launched_by_systemd | bool)
